@model ChocolateTycoon.ViewModels.FactoryViewModel

<br />

<tr>
    <td colspan="2">Raw Materials (Kg)</td>
    <td>Supplier</td>
    <td>Received (Kg)</td>
    <td colspan="2">Production per Day (units)</td>
    <td>Managers</td>
    <td>Engineers</td>
</tr>

<tr>
    @if (Model.Factory.StorageUnit == null)
    {
        using (Html.BeginForm("Create", "StorageUnit"))
        {
            <td colspan="4">
                @Html.HiddenFor(m => m.Factory.ID)
                <button id="createSU" class="btn btn-link btn-lg create" type="submit" style="padding: 0;">
                    <i class="glyphicon glyphicon-plus text-warning"></i>
                </button>
            </td>
        }
    }
    else
    {
        <td>
            @Html.DisplayFor(model => model.Factory.StorageUnit.RawMaterialAmount)
        </td>
        using (Html.BeginForm("Replenish", "StorageUnit"))
        {
            <td>
                @Html.HiddenFor(m => m.Factory.ID)
                <button id="replenish" class="btn btn-link  btn-sm" type="submit" style="padding: 0;">
                    <i class="glyphicon glyphicon-plus text-success"></i>
                </button>
            </td>
        }


        if (@Model.Factory.SupplierId != null)
        {
            <td>@Model.Factory.Supplier.Name</td>
            <td>@Model.Factory.StorageUnit.ShipmentsReceived</td>
        }
        else
        {
            <td>
                <a href="/Supplier" class="btn btn-link btn-lg" style="padding: 0">
                    <i class="glyphicon glyphicon-plus text-warning"></i>
                </a>
            </td>
            <td>-</td>
        }
    }


    @if (Model.Factory.ProductionUnit == null)
    {
        using (Html.BeginForm("Create", "ProductionUnit"))
        {
            <td colspan="2">
                @Html.HiddenFor(m => m.Factory.ID)
                <button id="createPU" class="btn btn-link btn-lg" type="submit" style="padding: 0;">
                    <i class="glyphicon glyphicon-plus text-warning"></i>
                </button>
            </td>
        }
    }
    else
    {
        <td>
            @Html.DisplayFor(model => model.Factory.ProductionUnit.MaxProductionPerDay)
        </td>
        <td>
            <a href="@Url.Action("Produce", new { id = Model.Factory.ID })" class="btn btn-link btn-sm" style="padding: 0">
                <i class="glyphicon glyphicon-plus text-success"></i>
            </a>
        </td>
    }

    @{ Html.RenderPartial("_FactoryEmployees", Model); }

</tr>

<script type="text/javascript">

        // Create Storage Unit Button
        let suButton = document.getElementById("createSU");
        // Create Production Unit Button
        let puButton = document.getElementById("createPU");
        // Get Production & Storage Unit cost
        let cost = '@ChocolateTycoon.Models.StorageUnit.CreateCost'

        // Bootbox confirmation for new Storage Unit
        if (suButton != null) {
            suButton.addEventListener("click", function (e) {
                e.preventDefault();

                bootbox.confirm({
                    size: "small",
                    closeButton: false,
                    message: "Create Storage Unit?" +
                        `<p style='color: orange; font-style: italic;'> This will cost ${cost} coins</p>`,
                    buttons: {
                        confirm: {
                            label: 'Let`s do this!',
                            className: 'btn-success '
                        },
                        cancel: {
                            label: 'Too expensive!',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            suButton.form.submit();
                        };
                    }
                });
            });
        }

        // Bootbox confirmation for new Production Unit
        if (puButton != null) {
            puButton.addEventListener("click", function (e) {
                e.preventDefault();

                bootbox.confirm({
                    size: "small",
                    closeButton: false,
                    message: "Create Production Unit?" +
                        `<p style='color: orange; font-style: italic;'> This will cost ${ cost } coins</p>`,
                    buttons: {
                        confirm: {
                            label: 'Let`s do this!',
                            className: 'btn-success '
                        },
                        cancel: {
                            label: 'Too expensive!',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            puButton.form.submit();
                        };
                    }
                });
            });
        }
</script>
