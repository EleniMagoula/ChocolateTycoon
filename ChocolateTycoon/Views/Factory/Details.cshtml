@model ChocolateTycoon.Models.Factory

<br />

<tr>
    <td colspan="2">Raw Materials (Kg)</td>
    <td>Active Contract</td>
    <td colspan="2">Production per Day (units)</td>
    <td>Managers</td>
    <td>Engineers</td>
</tr>

<tr>
    @if (Model.StorageUnit == null)
    {
        using (Html.BeginForm("Create", "StorageUnit"))
        {
            <td colspan="3">
                @Html.HiddenFor(m => m.ID)
                <button id="createSU" class="btn btn-link text-danger create" type="submit" style="padding: 0;">
                    <i class="glyphicon glyphicon-plus text-warning"></i>
                </button>
            </td>
        }
    }
    else
    {
        <td>
            @Html.DisplayFor(model => model.StorageUnit.RawMaterialAmount)
        </td>
        using (Html.BeginForm("Replenish", "StorageUnit"))
        {
            <td>
                @Html.HiddenFor(m => m.ID)
                <button id="replenish" class="btn btn-link" type="submit" style="padding: 0;">
                    <i class="glyphicon glyphicon-plus text-success"></i>
                </button>
                <p class="text-danger">@ViewBag.StorageMessage</p>
            </td>
        }

        <td>
            @if (@Model.SupplierId != null)
            {
                @Model.Supplier.Name
            }
            else
            {
            <span>None</span>
            }
        </td>
    }


        @if (Model.ProductionUnit == null)
        {
            using (Html.BeginForm("Create", "ProductionUnit"))
            {
                <td colspan="2">
                    @Html.HiddenFor(m => m.ID)
                    <button id="createPU" class="btn btn-link text-danger" type="submit" style="padding: 0;">
                        <i class="glyphicon glyphicon-plus text-warning"></i>
                    </button>
                </td>
            }
        }
        else
        {
            <td>
                @Html.DisplayFor(model => model.ProductionUnit.MaxProductionPerDay)
            </td>
            <td>
                @*@Html.ActionLink("Produce", "Produce", new { id = Model.ID }, new { @class = "btn btn-primary btn-sm", @style = "padding: 0" })*@
                <a href="@Url.Action("Produce", new { id = Model.ID })" class="btn btn-link" style="padding: 0">
                    <i class="glyphicon glyphicon-plus text-success"></i>
                </a>
                <p class="text-danger" style="font-style: italic; font-size: small;">@ViewBag.ProductionError</p>
                <p class="text-warning" style="font-style: italic; font-size: small;">@ViewBag.ProductionSuccess</p>
            </td>
        }

        @{
            Html.RenderAction("FactoryEmployees", new { id = Model.ID });
        }
    </tr>

    <script type="text/javascript">

        // Create Storage Unit Button
        var suButton = document.getElementById("createSU");

        // Create Production Unit Button
        var puButton = document.getElementById("createPU");

        // Bootbox confirmation for new Storage Unit
        if (suButton != null) {
            suButton.addEventListener("click", function (e) {
                e.preventDefault();

                bootbox.confirm({
                    size: "small",
                    closeButton: false,
                    message: "Create Storage Unit?" + "<p style='color: orange; font-style: italic;'>" + "This will cost 0.00 coins" + "</p>",
                    buttons: {
                        confirm: {
                            label: 'Let`s do this!',
                            className: 'btn-success '
                        },
                        cancel: {
                            label: 'Too expensive!',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            suButton.form.submit();
                        };
                    }
                });
            });
        }

        // Bootbox confirmation for new Production Unit
        if (puButton != null) {
            puButton.addEventListener("click", function (e) {
                e.preventDefault();

                bootbox.confirm({
                    size: "small",
                    closeButton: false,
                    message: "Create Production Unit?" + "<p style='color: orange; font-style: italic;'>" + "This will cost 0.00 coins" + "</p>",
                    buttons: {
                        confirm: {
                            label: 'Let`s do this!',
                            className: 'btn-success '
                        },
                        cancel: {
                            label: 'Too expensive!',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            puButton.form.submit();
                        };
                    }
                });
            });
        }
    </script>
