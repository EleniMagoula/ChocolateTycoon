@model IEnumerable<ChocolateTycoon.Core.Models.Supplier>

@{
    ViewBag.Title = "Index";
}

<h2 style="padding-top: 10px">Suppliers</h2>
<hr />

<div class="container-fluid">
    @foreach (var supplier in Model)
    {
        <div class="container-fluid col-md-4">
            <table id="table-@supplier.Id" class="table table-striped table-hover">
                <thead @*style="background-color: darkslategray;"*@>
                    <tr class="warning">
                        <th class="text-center" colspan="2">Offer #@supplier.Id</th>
                        <th style="display: none"></th>
                    </tr>
                </thead>
                <tbody style="text-wrap: none">
                </tbody>
                <tfoot>
                    <tr class="text-center">
                        <td colspan="2">
                            <a href="#" class="btn btn-lg js-break-contract">
                                <i class="fas fa-minus text-danger" style="font-size: 18px;"></i>
                            </a>
                            <a href="#" class="btn btn-lg js-make-contract">
                                <i class="fas fa-plus text-success" style="font-size: 18px;"></i>
                            </a>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    }
</div>

@section scripts
{
    <script>
        $(document).ready(function () {
            let tables = $(".table");

            // get the names of all existing factories
            function getAllFactoryNames() {
                let allNames = [];

                let defaultValue = { text: "Select", value: 0 };
                allNames.push(defaultValue);

                $.getJSON("/api/factories", function (result) {
                    $.each(result, function (key, value) {
                        let single = { text: value.name, value: value.id };
                        allNames.push(single);
                    })
                });

                return allNames;
            }

            let allFactoryNames = getAllFactoryNames();


            for (let i = 0; i < tables.length; i++) {
                let table = "#" + tables[i].getAttribute("id");

                fetch("/api/suppliers/" + (i + 1)).then(function (response) {

                    return response.text();

                }).then(function (data) {

                    const supplier = JSON.parse(data);

                    // get the names of the factories supplied by each supplier
                    function getFactoryNames() {
                        let names = [];

                        (supplier.factories).forEach(function (key, value) {
                            names.push(" " + key.name);
                        });

                        names.sort((a, b) => a.localeCompare(b));

                        return names.length > 0 ? names : "None";
                    };

                    // get the names and ids of supplied factories to fill select prompt
                    function getSuppliedFactories() {
                        let factories = [];

                        let defaultValue = { text: "Select", value: 0 };
                        factories.push(defaultValue);                          // define default selection

                        (supplier.factories).forEach(function (key, value) {

                            let factory = { text: key.name, value: key.id };
                            factories.push(factory);
                        });

                        return factories.length < 2 ? [{ text: "Nothing to show", value: 0 }] : factories;
                    };

                    // creates a bootbox alert error message
                    function whatThe(message) {
                        bootbox.alert({
                            closeButton: false,
                            message: message,
                            buttons: {
                                ok: {
                                    label: 'What the...',
                                    className: 'btn-danger'
                                }
                            }
                        });
                    };

                    function yackAndReload(message) {
                        bootbox.alert({
                            message: message,
                            buttons: {
                                ok: {
                                    label: 'yack, yack... now move on!',
                                    className: 'btn-success'
                                }
                            },
                            callback: function () { location.reload() }
                        });
                    }

                    // creates the base tables
                    $(table).DataTable({
                        bPaginate: false,
                        bInfo: false,
                        searching: false,
                        ordering: false,
                        columns: [
                            {},
                            {}
                        ]
                    })
                        .row.add([
                            "Supplier",
                            supplier.name
                        ])
                        .row.add([
                            "Offer Amount (Kg)",
                            supplier.offerAmount
                        ])
                        .row.add([
                            "Price per Kg",
                            supplier.pricePerKilo
                        ])
                        .row.add([
                            "Shipment Size (Kg)",
                            supplier.shippedAmount
                        ])
                        .row.add([
                            "Currently Serves",
                            getFactoryNames()
                        ])
                        .draw();


                    // executes the BREAK contract command
                    $(table).on('click', '.js-break-contract', function () {

                        bootbox.prompt({
                            closeButton: false,
                            title: "Select a Contract to Break",
                            inputType: 'select',
                            inputOptions: getSuppliedFactories(),
                            value: 0,
                            callback: function (factoryId) {

                                // actions when canceled is NOT clicked
                                if (factoryId != null) {

                                    // actions when nothing is selected
                                    if (factoryId == 0) {
                                        whatThe('Nothing selected!');
                                        return false;
                                    }

                                    let factoryName = supplier.factories.find(f => f.id == factoryId).name;

                                    bootbox.confirm({
                                        closeButton: false,
                                        message: function () {
                                            return `Are you SURE you want to break ${factoryName}'s Contract with ${supplier.name}?` +
                                                '<p class="text-danger" style="font-style: italic">You will be charged with a Penalty!</p>';
                                        },
                                        buttons: {
                                            confirm: {
                                                label: 'They are thieves!',
                                                className: 'btn-danger pull-left'
                                            },
                                            cancel: {
                                                label: 'Let\'s not get carried away',
                                                className: 'btn-success pull-right'
                                            }
                                        },
                                        callback: function (result) {

                                            // actions if OK button is clicked
                                            if (result) {
                                                $.ajax({
                                                    url: "/api/factories/" + factoryId,
                                                    method: "PUT",
                                                    success: function (response) {
                                                        yackAndReload(response);
                                                    },
                                                    error: function (response) {
                                                        whatThe(`${response.responseJSON.message}.. try again.`);
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            }
                        });
                    });

                    // executes the MAKE contract command
                    $(table).on('click', '.js-make-contract', function () {



                        bootbox.prompt({
                            closeButton: false,
                            title: "Select a Factory",
                            inputType: 'select',
                            inputOptions: allFactoryNames,
                            value: 0,
                            callback: function (factoryId) {

                                // actions when canceled is NOT clicked
                                if (factoryId != null) {

                                    // actions when nothing is selected
                                    if (factoryId == 0) {
                                        whatThe('Nothing selected!');
                                        return false;
                                    }

                                    bootbox.confirm({
                                        closeButton: false,
                                        message: "Are you sure?",
                                        buttons: {
                                            confirm: {
                                                label: 'They are the best!',
                                                className: 'btn-success pull-left'
                                            },
                                            cancel: {
                                                label: 'I can do better!',
                                                className: 'btn-danger pull-right'
                                            }
                                        },
                                        callback: function (result) {
                                            // actions if OK button is clicked


                                            // Dialog for 'processing'players choice




                                            var dialog = bootbox.dialog({
                                                title: 'Processing',
                                                message: '<p><i class="fa fa-spin fa-spinner"></i> Please wait while we update your contract...</p>'
                                            });
                                            dialog.init(function () {
                                                setTimeout(function () {
                                                    if (result) {
                                                        $.ajax({
                                                            url: "/api/factories/",
                                                            method: "POST",
                                                            data: { "Id": factoryId, "supplierId": supplier.id },
                                                            success: function (response) {
                                                                yackAndReload(response),3000;
                                                            },
                                                            error: function (response) {
                                                                whatThe(response.responseJSON.message);
                                                            }
                                                        });
                                                    };
                                                }, 3000);
                                            });


                                        }
                                    });
                                };
                            }
                        });
                    });
                });
            };
        });

    </script>
}